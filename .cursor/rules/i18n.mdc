---
description: 
globs: 
alwaysApply: false
---
# Hello Dify Internationalization (i18n) Guidelines

This document outlines the structure and standard operating procedures for managing multilingual content in the Hello Dify documentation website.

## Supported Languages

The Hello Dify project currently supports the following languages:
- English (en) - Default language
- Chinese (zh)
- Japanese (ja)

## File Structure

### MDX Documentation Files

Documentation content is stored as MDX files in the following directory structure:

```
content/
└── docs/
    ├── meta.json             # English metadata
    ├── meta.zh.json          # Chinese metadata
    ├── meta.ja.json          # Japanese metadata
    ├── index.mdx             # English documentation
    ├── index.zh.mdx          # Chinese documentation
    ├── index.ja.mdx          # Japanese documentation
    ├── plugin/
    │   ├── meta.json
    │   ├── meta.zh.json
    │   ├── meta.ja.json
    │   ├── ssh-plugin-vibe-coding.mdx
    │   ├── ssh-plugin-vibe-coding.zh.mdx
    │   ├── ssh-plugin-vibe-coding.ja.mdx
    │   └── ...
    └── workflow/
        ├── meta.json
        ├── meta.zh.json
        ├── meta.ja.json
        └── node/
            ├── meta.json
            ├── meta.zh.json
            ├── meta.ja.json
            ├── multilingual-document-translator.mdx
            ├── multilingual-document-translator.zh.mdx
            ├── multilingual-document-translator.ja.mdx
            └── ...
```

## Naming Conventions

1. **Documentation Files**:
   - English (default): `filename.mdx`
   - Chinese: `filename.zh.mdx`
   - Japanese: `filename.ja.mdx`

2. **Metadata Files**:
   - English (default): `meta.json`
   - Chinese: `meta.zh.json`
   - Japanese: `meta.ja.json`

## Language-Specific Routing

The application uses Next.js routing with language parameter:
- Base structure: `/app/[lang]/...`
- URLs follow the pattern: `/{lang}/docs/...`
- Example: `/en/docs/workflow/node/multilingual-document-translator`

## Standard Operating Procedure for i18n

### Creating New Content

1. **Always create the English version first**: 
   - Create the English MDX file (`filename.mdx`)
   - Update the English metadata file (`meta.json`) to include the new page

2. **Then create translations**:
   - Create Chinese translation (`filename.zh.mdx`)
   - Create Japanese translation (`filename.ja.mdx`)
   - Update respective metadata files (`meta.zh.json` and `meta.ja.json`)

### Updating Metadata

When adding a new page:

1. English metadata example (`meta.json`):
```json
{
    "title": "Node",
    "icon": "node-tree",
    "defaultOpen": false,
    "pages": [
        "multilingual-document-translator"
    ]
}
```

2. Create corresponding Chinese metadata (`meta.zh.json`):
```json
{
    "title": "节点",
    "icon": "node-tree",
    "defaultOpen": false,
    "pages": [
        "multilingual-document-translator"
    ]
}
```

3. Create corresponding Japanese metadata (`meta.ja.json`):
```json
{
    "title": "ノード",
    "icon": "node-tree",
    "defaultOpen": false,
    "pages": [
        "multilingual-document-translator"
    ]
}
```

### Document Content Structure

Each MDX document should maintain this structure:

```md
---
title: "Title in the respective language"
description: "Description in the respective language"
---

# Content in the respective language
...
```

### Handling Missing Translations

The system will fall back to English content when a translated version is not available.

## Guidelines for Translators

1. Maintain the same document structure between languages
2. Preserve all code blocks exactly as they appear in the English version
3. Translate UI elements mentioned in the document to match the actual translated UI
4. Keep image references the same across all translations
5. Preserve links but update any link text that needs translation

## Validation Tips

- Ensure all language versions of a document have the same frontmatter fields
- Verify that all links work correctly in each language version
- Check that metadata entries align across all language versions
- Test navigation between translated pages to ensure proper language persistence
